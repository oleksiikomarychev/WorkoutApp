"""Remove cross-service foreign keys

Revision ID: d0afaef60b26
Revises: 1234abcd5678
Create Date: 2025-09-19 00:06:25.440715
"""

from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision = 'd0afaef60b26'
down_revision = '1234abcd5678'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_workout_exercise_sets_id'), table_name='workout_exercise_sets')
    op.drop_index(op.f('ix_workout_exercises_id'), table_name='workout_exercises')
    op.drop_index(op.f('ix_workouts_id'), table_name='workouts')
    
    op.execute('DROP TABLE IF EXISTS workout_exercise_sets CASCADE')
    op.execute('DROP TABLE IF EXISTS params_workouts CASCADE')
    op.execute('DROP TABLE IF EXISTS workout_exercises CASCADE')
    op.execute('DROP TABLE IF EXISTS workouts CASCADE')
    
    op.drop_index('ix_applied_workouts_id', table_name='applied_workouts')
    op.drop_index('ix_applied_plan_workouts_id', table_name='applied_plan_workouts')
    op.drop_column('applied_calendar_plans', 'user_id')
    
    # Conditionally drop foreign key
    op.execute('ALTER TABLE applied_workouts DROP CONSTRAINT IF EXISTS applied_workouts_workout_id_fkey')
    
    op.drop_column('calendar_plans', 'is_active')
    op.drop_column('calendar_plans', 'user_id')
    op.drop_column('calendar_plans', 'schedule')
    op.drop_column('calendar_plans', 'duration_weeks')
    
    # Step 1: Add schedule column as nullable
    op.add_column('microcycles', sa.Column('schedule', sa.JSON(), nullable=True))
    
    # Step 2: Populate with default value
    op.execute('UPDATE microcycles SET schedule = \'{}\'')
    
    # Step 3: Alter column to be non-nullable
    op.alter_column('microcycles', 'schedule', nullable=False)
    
    op.drop_column('microcycles', 'params_workout_ids')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('microcycles', sa.Column('params_workout_ids', postgresql.ARRAY(sa.INTEGER()), autoincrement=False, nullable=True))
    op.drop_column('microcycles', 'schedule')
    op.add_column('calendar_plans', sa.Column('duration_weeks', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('calendar_plans', sa.Column('schedule', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('calendar_plans', sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('calendar_plans', sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.create_index(op.f('ix_calendar_plans_user_id'), 'calendar_plans', ['user_id'], unique=False)
    op.create_foreign_key(op.f('applied_workouts_workout_id_fkey'), 'applied_workouts', 'workouts', ['workout_id'], ['id'])
    op.add_column('applied_calendar_plans', sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=False))
    
    # Recreate tables
    op.create_table('workouts',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('workouts_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('microcycle_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('day', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['microcycle_id'], ['microcycles.id'], name='workouts_microcycle_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='workouts_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('workout_exercises',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('workout_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('exercise_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('order_index', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['workout_id'], ['workouts.id'], name='workout_exercises_workout_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='workout_exercises_pkey')
    )
    op.create_table('params_workouts',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('parameters', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('exercises', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='params_workouts_pkey')
    )
    op.create_table('workout_exercise_sets',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('workout_exercise_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('intensity', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('effort', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('volume', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['workout_exercise_id'], ['workout_exercises.id'], name='workout_exercise_sets_workout_exercise_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='workout_exercise_sets_pkey')
    )
    
    # Recreate indexes
    op.create_index(op.f('ix_workout_exercise_sets_id'), 'workout_exercise_sets', ['id'], unique=False)
    op.create_index(op.f('ix_workout_exercises_id'), 'workout_exercises', ['id'], unique=False)
    op.create_index(op.f('ix_workouts_id'), 'workouts', ['id'], unique=False)
    op.create_index(op.f('ix_applied_plan_workouts_id'), 'applied_plan_workouts', ['id'], unique=False)
    op.create_index(op.f('ix_applied_workouts_id'), 'applied_workouts', ['id'], unique=False)
    # ### end Alembic commands ###
