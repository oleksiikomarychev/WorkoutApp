"""Initial migration

Revision ID: 073a55c4db5e
Revises: 
Create Date: 2025-05-28 10:19:25.314668

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '073a55c4db5e'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # We'll use a string-based enum for the role column
    # The actual enum type will be created automatically by SQLAlchemy
    
    # Create exercise_list table (no dependencies)
    op.create_table('exercise_list',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=255), nullable=False),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('muscle_group', sa.String(length=100), nullable=True),
        sa.Column('equipment', sa.String(length=255), nullable=True),
        sa.Column('video_url', sa.String(), nullable=True),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_exercise_list_id'), 'exercise_list', ['id'], unique=False)
    
    # Create users table first without the assigned_trainer_id foreign key
    op.create_table('users',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('email', sa.String(), nullable=False),
        sa.Column('hashed_password', sa.String(), nullable=False),
        sa.Column('first_name', sa.String(), nullable=True),
        sa.Column('last_name', sa.String(), nullable=True),
        sa.Column('role', sa.String(), nullable=True),
        sa.Column('assigned_trainer_id', sa.Integer(), nullable=True),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    
    # Now create trainers table with foreign key to users
    op.create_table('trainers',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('specialization', sa.String(), nullable=True),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('user_id')
    )
    op.create_index(op.f('ix_trainers_id'), 'trainers', ['id'], unique=False)
    
    # Now add the foreign key constraint to users.assigned_trainer_id
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_foreign_key('fk_users_assigned_trainer_id', 'trainers', ['assigned_trainer_id'], ['id'])
    op.create_table('athletes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('date_of_birth', sa.Date(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_index(op.f('ix_athletes_id'), 'athletes', ['id'], unique=False)
    op.create_table('user_maxes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('exercise_id', sa.Integer(), nullable=False),
    sa.Column('max_weight', sa.Integer(), nullable=False),
    sa.Column('rep_max', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['exercise_id'], ['exercise_list.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_maxes_id'), 'user_maxes', ['id'], unique=False)
    op.create_table('llm_progressions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_max_id', sa.Integer(), nullable=False),
    sa.Column('sets', sa.Integer(), nullable=False),
    sa.Column('intensity', sa.Integer(), nullable=False),
    sa.Column('effort', sa.Integer(), nullable=False),
    sa.Column('volume', sa.Integer(), nullable=False),
    sa.Column('llm_recommendation', sa.Text(), nullable=True),
    sa.Column('user_data', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['user_max_id'], ['user_maxes.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_llm_progressions_id'), 'llm_progressions', ['id'], unique=False)
    op.create_table('progression_templates',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('user_max_id', sa.Integer(), nullable=False),
    sa.Column('sets', sa.Integer(), nullable=False),
    sa.Column('intensity', sa.Integer(), nullable=False),
    sa.Column('volume', sa.Integer(), nullable=False),
    sa.Column('effort', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_max_id'], ['user_maxes.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_progression_templates_id'), 'progression_templates', ['id'], unique=False)
    op.create_table('progressions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_max_id', sa.Integer(), nullable=False),
    sa.Column('sets', sa.Integer(), nullable=False),
    sa.Column('intensity', sa.Integer(), nullable=False),
    sa.Column('effort', sa.Integer(), nullable=False),
    sa.Column('volume', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_max_id'], ['user_maxes.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_progressions_id'), 'progressions', ['id'], unique=False)
    op.create_table('workouts',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('progression_template_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['progression_template_id'], ['progressions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_workouts_id'), 'workouts', ['id'], unique=False)
    op.create_table('exercises',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('sets', sa.Integer(), nullable=False),
    sa.Column('reps', sa.Integer(), nullable=False),
    sa.Column('weight', sa.Integer(), nullable=True),
    sa.Column('workout_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['workout_id'], ['workouts.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_exercises_id'), 'exercises', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop tables in reverse order of creation
    op.drop_index(op.f('ix_exercises_id'), table_name='exercises')
    op.drop_table('exercises')
    op.drop_index(op.f('ix_workouts_id'), table_name='workouts')
    op.drop_table('workouts')
    op.drop_index(op.f('ix_progressions_id'), table_name='progressions')
    op.drop_table('progressions')
    op.drop_index(op.f('ix_progression_templates_id'), table_name='progression_templates')
    op.drop_table('progression_templates')
    op.drop_index(op.f('ix_llm_progressions_id'), table_name='llm_progressions')
    op.drop_table('llm_progressions')
    op.drop_index(op.f('ix_user_maxes_id'), table_name='user_maxes')
    op.drop_table('user_maxes')
    op.drop_index(op.f('ix_athletes_id'), table_name='athletes')
    op.drop_table('athletes')
    
    # First remove the foreign key constraint from users
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_constraint('fk_users_assigned_trainer_id', type_='foreignkey')
    
    # Then drop the trainers table
    op.drop_index(op.f('ix_trainers_id'), table_name='trainers')
    op.drop_table('trainers')
    
    # Then drop the users table
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    
    # Drop the exercise_list table
    op.drop_index(op.f('ix_exercise_list_id'), table_name='exercise_list')
    op.drop_table('exercise_list')
    
    # Finally drop the enum type
    user_role_enum = sa.Enum('ATHLETE', 'TRAINER', 'ADMIN', name='userrole')
    user_role_enum.drop(op.get_bind(), checkfirst=True)
    # ### end Alembic commands ###
